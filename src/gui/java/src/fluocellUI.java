/*
 * Fluocell Java interface
 * 
 */
package my.fluocell;
import java.awt.Font;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import matlabcontrol.*;
import java.awt.Toolkit;

public class fluocellUI extends javax.swing.JFrame {

    /**
     * Creates new form fluocellUI
     */
    public fluocellUI() {
        initComponents();
        setIcon(); //generation of fluocel icon
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chooseThreshold = new javax.swing.JFrame();
        jPanel1 = new javax.swing.JPanel();
        ThesholdLabel = new javax.swing.JLabel();
        brightnessFactorLabel = new javax.swing.JLabel();
        brightnessFactor = new javax.swing.JTextField();
        showBoundary = new javax.swing.JCheckBox();
        applyMask = new javax.swing.JCheckBox();
        threshold = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        numROI = new javax.swing.JTextField();
        numROILabel = new javax.swing.JLabel();
        batchUpdateImage = new javax.swing.JFrame();
        jLabel4 = new javax.swing.JLabel();
        imageIndex = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        timeZero = new javax.swing.JLabel();
        timeZeroText = new javax.swing.JTextField();
        threeDimensionDialog = new javax.swing.JFrame();
        jPanel2 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        zindexSpinner = new javax.swing.JSpinner();
        zindexEnableCheckBox = new javax.swing.JCheckBox();
        folderChooser = new javax.swing.JFileChooser();
        figureChooser = new javax.swing.JFileChooser();
        fileChooser = new javax.swing.JFileChooser();
        errorDialog = new javax.swing.JDialog();
        jLabel13 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        mainControl = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        indexSpinner = new javax.swing.JSpinner();
        protocol = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        timeFrame = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        intensity = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        fretRatio = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        fileNamePattern = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        firstChannel = new javax.swing.JTextField();
        secondChannel = new javax.swing.JTextField();
        thirdChannel = new javax.swing.JTextField();
        fourthChannel = new javax.swing.JTextField();
        processingOptions = new javax.swing.JPanel();
        cropImage = new javax.swing.JCheckBox();
        applyFilter = new javax.swing.JCheckBox();
        saveImage = new javax.swing.JCheckBox();
        jLabelQuantification = new javax.swing.JLabel();
        comboBoxQuantification = new javax.swing.JComboBox();
        comboBoxSubtractBackground = new javax.swing.JComboBox();
        jLabelSubtractBackground = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        file = new javax.swing.JMenu();
        openFolder = new javax.swing.JMenuItem();
        openFigure = new javax.swing.JMenuItem();
        closeFigure = new javax.swing.JMenuItem();
        quit = new javax.swing.JMenuItem();
        tools = new javax.swing.JMenu();
        adjustBrightnessFactor = new javax.swing.JMenuItem();
        batchUpdate = new javax.swing.JMenuItem();
        threeDimension = new javax.swing.JMenuItem();

        chooseThreshold.setAlwaysOnTop(true);
        chooseThreshold.setMinimumSize(new java.awt.Dimension(800, 200));

        ThesholdLabel.setText("Threshold");

        brightnessFactorLabel.setLabelFor(brightnessFactorLabel);
        brightnessFactorLabel.setText("Brightness Factor");
        brightnessFactorLabel.setToolTipText("");

        brightnessFactor.setText("1.0");
        brightnessFactor.setToolTipText("");
        brightnessFactor.setName(""); // NOI18N
        brightnessFactor.setPreferredSize(new java.awt.Dimension(60, 30));
        brightnessFactor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                brightnessFactorFocusLost(evt);
            }
        });
        brightnessFactor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brightnessFactorActionPerformed(evt);
            }
        });

        showBoundary.setText("Show Detected Boundary");
        showBoundary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showBoundaryActionPerformed(evt);
            }
        });

        applyMask.setText("Apply Mask");
        applyMask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyMaskActionPerformed(evt);
            }
        });

        threshold.setText("(Optional)");
        threshold.setName(""); // NOI18N
        threshold.setPreferredSize(new java.awt.Dimension(60, 30));
        threshold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                thresholdFocusLost(evt);
            }
        });
        threshold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                thresholdActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(brightnessFactorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(brightnessFactor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(149, 149, 149)
                .addComponent(ThesholdLabel)
                .addGap(18, 18, 18)
                .addComponent(threshold, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(showBoundary)
                    .addComponent(applyMask))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(brightnessFactorLabel)
                    .addComponent(brightnessFactor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ThesholdLabel)
                    .addComponent(threshold, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showBoundary, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(applyMask)
                .addGap(0, 10, Short.MAX_VALUE))
        );

        brightnessFactorLabel.getAccessibleContext().setAccessibleName("BrightnessFactor");
        brightnessFactorLabel.getAccessibleContext().setAccessibleDescription("");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 592, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 58, Short.MAX_VALUE)
        );

        numROI.setText("1");
        numROI.setToolTipText("");
        numROI.setName(""); // NOI18N
        numROI.setPreferredSize(new java.awt.Dimension(60, 30));
        numROI.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                numROIFocusLost(evt);
            }
        });
        numROI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numROIActionPerformed(evt);
            }
        });

        numROILabel.setLabelFor(brightnessFactorLabel);
        numROILabel.setText("Number of ROIs");
        numROILabel.setToolTipText("");

        javax.swing.GroupLayout chooseThresholdLayout = new javax.swing.GroupLayout(chooseThreshold.getContentPane());
        chooseThreshold.getContentPane().setLayout(chooseThresholdLayout);
        chooseThresholdLayout.setHorizontalGroup(
            chooseThresholdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, chooseThresholdLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(chooseThresholdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(chooseThresholdLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(numROILabel, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(numROI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        chooseThresholdLayout.setVerticalGroup(
            chooseThresholdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chooseThresholdLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(chooseThresholdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(chooseThresholdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(numROI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(numROILabel)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        batchUpdateImage.setMinimumSize(new java.awt.Dimension(300, 150));

        jLabel4.setText("Image Index");

        imageIndex.setText("[1:1]");
        imageIndex.setPreferredSize(new java.awt.Dimension(80, 30));
        imageIndex.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                imageIndexFocusLost(evt);
            }
        });

        jButton1.setText("OK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        timeZero.setText("Time Zero Between Frames");

        timeZeroText.setText("(Optional: [1;2])");
        timeZeroText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                timeZeroTextFocusLost(evt);
            }
        });
        timeZeroText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeZeroTextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout batchUpdateImageLayout = new javax.swing.GroupLayout(batchUpdateImage.getContentPane());
        batchUpdateImage.getContentPane().setLayout(batchUpdateImageLayout);
        batchUpdateImageLayout.setHorizontalGroup(
            batchUpdateImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(batchUpdateImageLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(batchUpdateImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(batchUpdateImageLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(imageIndex, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1))
                    .addGroup(batchUpdateImageLayout.createSequentialGroup()
                        .addComponent(timeZero)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(timeZeroText, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(100, Short.MAX_VALUE))
        );
        batchUpdateImageLayout.setVerticalGroup(
            batchUpdateImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(batchUpdateImageLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(batchUpdateImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(imageIndex, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addGroup(batchUpdateImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timeZero)
                    .addComponent(timeZeroText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(50, Short.MAX_VALUE))
        );

        threeDimensionDialog.setMinimumSize(new java.awt.Dimension(650, 300));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Z-Stack Index"));

        jLabel12.setText("Index");

        zindexSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        zindexSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                zindexSpinnerStateChanged(evt);
            }
        });

        zindexEnableCheckBox.setText("Enable reading of z-stack");
        zindexEnableCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zindexEnableCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(zindexSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(zindexEnableCheckBox)
                .addContainerGap(235, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(zindexSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(zindexEnableCheckBox))
                .addContainerGap(173, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout threeDimensionDialogLayout = new javax.swing.GroupLayout(threeDimensionDialog.getContentPane());
        threeDimensionDialog.getContentPane().setLayout(threeDimensionDialogLayout);
        threeDimensionDialogLayout.setHorizontalGroup(
            threeDimensionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(threeDimensionDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        threeDimensionDialogLayout.setVerticalGroup(
            threeDimensionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(threeDimensionDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        folderChooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

        fileChooser.setDialogTitle("Choose MATLAB executable or script");

        errorDialog.setAlwaysOnTop(true);
        errorDialog.setMinimumSize(new java.awt.Dimension(230, 150));
        errorDialog.setModal(true);
        errorDialog.setModalExclusionType(java.awt.Dialog.ModalExclusionType.APPLICATION_EXCLUDE);
        errorDialog.setResizable(false);
        errorDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                errorDialogWindowClosing(evt);
            }
        });

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("File selected not a MATLAB executable");
        jLabel13.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jButton3.setText("OK");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout errorDialogLayout = new javax.swing.GroupLayout(errorDialog.getContentPane());
        errorDialog.getContentPane().setLayout(errorDialogLayout);
        errorDialogLayout.setHorizontalGroup(
            errorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(errorDialogLayout.createSequentialGroup()
                .addGap(85, 85, 85)
                .addComponent(jButton3)
                .addContainerGap(88, Short.MAX_VALUE))
            .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        errorDialogLayout.setVerticalGroup(
            errorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(errorDialogLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel13)
                .addGap(18, 18, 18)
                .addComponent(jButton3)
                .addContainerGap(72, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 36, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 201, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        mainControl.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Main Control", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 24))); // NOI18N
        mainControl.setFocusable(false);
        mainControl.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N

        jLabel1.setText("Index");

        indexSpinner.setFont(indexSpinner.getFont());
        indexSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        indexSpinner.setPreferredSize(new java.awt.Dimension(58, 30));
        indexSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                indexSpinnerStateChanged(evt);
            }
        });

        protocol.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "FRET", "FRET-Intensity", "FRET-Intensity-2", "FRET-DIC", "FRET-Intensity-DIC", "Intensity", "Intensity-DIC", "FLIM", "STED" }));
        protocol.setPreferredSize(new java.awt.Dimension(100, 20));
        protocol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                protocolActionPerformed(evt);
            }
        });

        jLabel2.setText("Time Frame Pattern");

        timeFrame.setText("Loading...");
        timeFrame.setPreferredSize(new java.awt.Dimension(80, 30));
        timeFrame.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                timeFrameFocusLost(evt);
            }
        });

        jLabel3.setText("Intensity");

        intensity.setText("Loading...");
        intensity.setPreferredSize(new java.awt.Dimension(80, 30));
        intensity.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                intensityFocusLost(evt);
            }
        });
        intensity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                intensityActionPerformed(evt);
            }
        });

        jLabel5.setText("FRET Ratio");

        fretRatio.setText("Loading...");
        fretRatio.setPreferredSize(new java.awt.Dimension(80, 30));
        fretRatio.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                fretRatioFocusLost(evt);
            }
        });

        jLabel10.setText("Protocol:");

        javax.swing.GroupLayout mainControlLayout = new javax.swing.GroupLayout(mainControl);
        mainControl.setLayout(mainControlLayout);
        mainControlLayout.setHorizontalGroup(
            mainControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainControlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainControlLayout.createSequentialGroup()
                        .addGroup(mainControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainControlLayout.createSequentialGroup()
                                .addGroup(mainControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(mainControlLayout.createSequentialGroup()
                                        .addGap(8, 8, 8)
                                        .addComponent(jLabel3))
                                    .addComponent(intensity, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 86, Short.MAX_VALUE)
                                .addGroup(mainControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(mainControlLayout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addGap(57, 57, 57))
                                    .addComponent(fretRatio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(mainControlLayout.createSequentialGroup()
                                .addGroup(mainControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(mainControlLayout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(indexSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(timeFrame, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(mainControlLayout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(protocol, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(mainControlLayout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        mainControlLayout.setVerticalGroup(
            mainControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainControlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(protocol, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mainControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(indexSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(timeFrame, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mainControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(intensity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fretRatio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        fileNamePattern.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "File Name Pattern", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 24))); // NOI18N

        jLabel6.setText("First Channel Pattern");

        jLabel7.setText("Second Channel Pattern");
        jLabel7.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        jLabel8.setText("Third Channel Pattern");

        jLabel9.setText("Fourth Channel Pattern");
        jLabel9.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        firstChannel.setText("Loading...");
        firstChannel.setPreferredSize(new java.awt.Dimension(80, 30));
        firstChannel.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                firstChannelFocusLost(evt);
            }
        });

        secondChannel.setText("Loading...");
        secondChannel.setPreferredSize(new java.awt.Dimension(80, 30));
        secondChannel.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                secondChannelFocusLost(evt);
            }
        });

        thirdChannel.setText("Loading...");
        thirdChannel.setPreferredSize(new java.awt.Dimension(80, 30));
        thirdChannel.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                thirdChannelFocusLost(evt);
            }
        });
        thirdChannel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                thirdChannelActionPerformed(evt);
            }
        });

        fourthChannel.setText("Loading...");
        fourthChannel.setPreferredSize(new java.awt.Dimension(80, 30));
        fourthChannel.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                fourthChannelFocusLost(evt);
            }
        });

        javax.swing.GroupLayout fileNamePatternLayout = new javax.swing.GroupLayout(fileNamePattern);
        fileNamePattern.setLayout(fileNamePatternLayout);
        fileNamePatternLayout.setHorizontalGroup(
            fileNamePatternLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fileNamePatternLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fileNamePatternLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel6)
                    .addComponent(jLabel8)
                    .addComponent(firstChannel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(thirdChannel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 89, Short.MAX_VALUE)
                .addGroup(fileNamePatternLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(secondChannel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fourthChannel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(36, 36, 36))
        );
        fileNamePatternLayout.setVerticalGroup(
            fileNamePatternLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fileNamePatternLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fileNamePatternLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fileNamePatternLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstChannel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(secondChannel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(fileNamePatternLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fileNamePatternLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(thirdChannel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fourthChannel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        processingOptions.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Processing Options", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 24))); // NOI18N

        cropImage.setText("Crop Image");
        cropImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cropImageActionPerformed(evt);
            }
        });

        applyFilter.setText("Apply Median Filter");
        applyFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyFilterActionPerformed(evt);
            }
        });

        saveImage.setText("Save Processed Image");
        saveImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveImageActionPerformed(evt);
            }
        });

        jLabelQuantification.setText("Quantification:");

        comboBoxQuantification.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0 - None", "1 - ROI Fixed", "2 - ROI Track Cell", "3 - Quantify Subcell" }));
        comboBoxQuantification.setSelectedIndex(0);
        comboBoxQuantification.setPreferredSize(new java.awt.Dimension(100, 20));
        comboBoxQuantification.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxQuantificationActionPerformed(evt);
            }
        });

        comboBoxSubtractBackground.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0 - None", "1 - Manual", "2 - Auto" }));
        comboBoxSubtractBackground.setPreferredSize(new java.awt.Dimension(100, 20));
        comboBoxSubtractBackground.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxSubtractBackgroundActionPerformed(evt);
            }
        });

        jLabelSubtractBackground.setText("Subtract Background:");

        javax.swing.GroupLayout processingOptionsLayout = new javax.swing.GroupLayout(processingOptions);
        processingOptions.setLayout(processingOptionsLayout);
        processingOptionsLayout.setHorizontalGroup(
            processingOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(processingOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(processingOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(processingOptionsLayout.createSequentialGroup()
                        .addComponent(jLabelSubtractBackground)
                        .addGap(18, 18, 18)
                        .addComponent(comboBoxSubtractBackground, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(applyFilter)
                    .addGroup(processingOptionsLayout.createSequentialGroup()
                        .addGroup(processingOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cropImage)
                            .addComponent(jLabelQuantification))
                        .addGap(69, 69, 69)
                        .addGroup(processingOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(saveImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(comboBoxQuantification, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        processingOptionsLayout.setVerticalGroup(
            processingOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(processingOptionsLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(processingOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSubtractBackground)
                    .addComponent(comboBoxSubtractBackground, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE))
                .addGap(6, 6, 6)
                .addComponent(applyFilter)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(processingOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cropImage)
                    .addComponent(saveImage))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(processingOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelQuantification)
                    .addComponent(comboBoxQuantification, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13))
        );

        file.setText("File");
        file.setToolTipText("");

        openFolder.setText("Open Folder");
        openFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFolderActionPerformed(evt);
            }
        });
        file.add(openFolder);

        openFigure.setText("Open Figure");
        openFigure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFigureActionPerformed(evt);
            }
        });
        file.add(openFigure);

        closeFigure.setText("Close Figure");
        closeFigure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeFigureActionPerformed(evt);
            }
        });
        file.add(closeFigure);

        quit.setText("Quit");
        quit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitActionPerformed(evt);
            }
        });
        file.add(quit);

        jMenuBar1.add(file);

        tools.setText("Tools");

        adjustBrightnessFactor.setText("Adjust Brightness Factor");
        adjustBrightnessFactor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adjustBrightnessFactorActionPerformed(evt);
            }
        });
        tools.add(adjustBrightnessFactor);

        batchUpdate.setText("Batch Update Image");
        batchUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                batchUpdateActionPerformed(evt);
            }
        });
        tools.add(batchUpdate);

        threeDimension.setText("3D");
        threeDimension.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                threeDimensionActionPerformed(evt);
            }
        });
        tools.add(threeDimension);

        jMenuBar1.add(tools);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(mainControl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(fileNamePattern, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(processingOptions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fileNamePattern, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(processingOptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(mainControl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFolderActionPerformed
        try {
            double success;            
            proxy.setVariable("default_path", default_path);
            proxy.eval("fluocell_data.path = default_path;");
            proxy.eval("[this_path success]= my_uigetdir(fluocell_data.path,'Please Select a Data Folder');");
            // success = proxy.getVariable("success");
            success = ((double[]) proxy.getVariable("success"))[0];
            // Send command to open file explorer at selected folder
            // OS dependent
            if (success == 1) {
                proxy.eval("fluocell_data.path = this_path;");
                proxy.eval("default_path = fluocell_data.path;");
                default_path = (String) proxy.getVariable("default_path");
                
               if (OS.contains("win")) {
                    //default_path = default_path.substring(0, default_path.length() - 1);
                    Runtime.getRuntime().exec("explorer " + "\"" + default_path);
                }
                else if (OS.contains("mac")) {
                    //default_path = default_path.substring(0, default_path.length() - 1);
                    //Runtime.getRuntime().exec("open " + "\"" + default_path + "\"");
                }
                else if (OS.contains("aix") || OS.contains("nix") || OS.contains("nux")) {
                    //default_path = default_path.substring(0, default_path.length() - 1);
                    //Runtime.getRuntime().exec("xdg-open " + default_path);
                } 
                proxy.setVariable("default_path", default_path);
                proxy.eval("fluocell_data.path = default_path;"); 
                
            }
        } catch (MatlabInvocationException ex) {
            Logger.getLogger(fluocellUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(fluocellUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_openFolderActionPerformed

    private void indexSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_indexSpinnerStateChanged
        if (file_opened) {
            try {
                proxy.setVariable("index", indexSpinner.getValue());
                proxy.eval("fluocell_data.index = index;");
                proxy.eval("fluocell_data = get_image(fluocell_data,0);");
                proxy.eval("fluocell_data = update_figure(fluocell_data);");
            } catch (MatlabInvocationException ex) {
                Logger.getLogger(fluocellUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }     
    }//GEN-LAST:event_indexSpinnerStateChanged

    private void adjustBrightnessFactorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adjustBrightnessFactorActionPerformed
        chooseThreshold.setVisible(true);
    }//GEN-LAST:event_adjustBrightnessFactorActionPerformed

    private void batchUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_batchUpdateActionPerformed
        batchUpdateImage.setVisible(true);
    }//GEN-LAST:event_batchUpdateActionPerformed

    private void quitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitActionPerformed
        writeFile();
        proxy.disconnect();

        System.exit(0);
    }//GEN-LAST:event_quitActionPerformed

    private void openFigureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFigureActionPerformed
        try {
            double success;                
            file_opened = true;
            proxy.setVariable("protocol", protocol.getSelectedItem());
            proxy.eval("fluocell_data.protocol = protocol;");
            proxy.setVariable("subtract_background_str", comboBoxSubtractBackground.getSelectedItem() );
            proxy.eval("fluocell_data.subtract_background = str2double(subtract_background_str(1));");
            proxy.setVariable("quantification_str", comboBoxQuantification.getSelectedItem() );
            proxy.eval("fluocell_data.quantify_roi = str2double(quantification_str(1));");

            proxy.eval("fluocell_data.index = 1;");
            proxy.setVariable("default_path", default_path);
            proxy.eval("fluocell_data.path = default_path;");
                
            proxy.setVariable("intensity_text", intensity.getText());
            proxy.eval("fluocell_data.intensity_bound = str2num(intensity_text);");
            proxy.setVariable("ratio_text", fretRatio.getText());
            proxy.setVariable("time_zero_text", timeZeroText.getText());
            proxy.eval("fluocell_data.ratio_bound = str2num(ratio_text);");
                
            proxy.eval("fluocell_data = open_button_callback(fluocell_data);");
            proxy.eval("success = fluocell_data.success;");
            success = ((double[]) proxy.getVariable("success"))[0];
            // double result = ((double[]) proxy.getVariable("a"))[0];
            if (success != 0) {
                proxy.eval("fluocell_data = init_figure(fluocell_data);");
                proxy.eval("fluocell_data = get_image(fluocell_data, 1);");
                proxy.eval("fluocell_data = update_figure(fluocell_data);");
                  
                indexSpinner.setValue(1);
                    
                proxy.setVariable("intensity_text", intensity.getText());
                proxy.eval("eval(strcat('fluocell_data.intensity_bound = ', intensity_text, ';'));");
                if (protocol.getSelectedItem() == "FRET") {
                    proxy.setVariable("ratio_text", fretRatio.getText());
                    proxy.eval("eval(strcat('fluocell_data.ratio_bound = ', ratio_text, ';'));");                 
                }
                    
                proxy.eval("default_path = fluocell_data.path;");
                default_path = (String) proxy.getVariable("default_path");
            }
        } catch (MatlabInvocationException ex) {
            Logger.getLogger(fluocellUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_openFigureActionPerformed

    private void closeFigureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeFigureActionPerformed
        file_opened = false;
        try {
            proxy.eval("fluocell_data = close_button_callback(fluocell_data);");
        } catch (MatlabInvocationException ex) {
            Logger.getLogger(fluocellUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_closeFigureActionPerformed

    private void protocolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_protocolActionPerformed
        try {
            proxy.setVariable("protocol", protocol.getSelectedItem());
            proxy.eval("fluocell_data.protocol = protocol;");
        } catch (MatlabInvocationException ex) {
            Logger.getLogger(fluocellUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_protocolActionPerformed

    private void cropImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cropImageActionPerformed
        try {
            proxy.setVariable("crop_image", cropImage.isSelected());
            proxy.eval("fluocell_data.crop_image = crop_image;");
        } catch (MatlabInvocationException ex) {
            Logger.getLogger(fluocellUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cropImageActionPerformed

    private void applyFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyFilterActionPerformed
        try {
            proxy.setVariable("apply_median_filter", applyFilter.isSelected());
            proxy.eval("fluocell_data.median_filter = apply_median_filter;");
        } catch (MatlabInvocationException ex) {
            Logger.getLogger(fluocellUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_applyFilterActionPerformed

    private void saveImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveImageActionPerformed
        try {
            proxy.setVariable("save_processed_image", saveImage.isSelected());
            proxy.eval("fluocell_data.save_processed_image = save_processed_image;");
        } catch (MatlabInvocationException ex) {
            Logger.getLogger(fluocellUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_saveImageActionPerformed

    private void showBoundaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showBoundaryActionPerformed
        try {
            proxy.setVariable("show_detected_boundary", showBoundary.isSelected());
            proxy.eval("fluocell_data.show_detected_boundary = show_detected_boundary;");
        } catch (MatlabInvocationException ex) {
            Logger.getLogger(fluocellUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_showBoundaryActionPerformed

    private void applyMaskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyMaskActionPerformed
        try {
            proxy.setVariable("need_apply_mask", applyMask.isSelected());
            proxy.eval("fluocell_data.need_apply_mask = need_apply_mask;");
        } catch (MatlabInvocationException ex) {
            Logger.getLogger(fluocellUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_applyMaskActionPerformed

    private void intensityFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_intensityFocusLost
        try {
            proxy.setVariable("intensity_text", intensity.getText());
            proxy.eval("fluocell_data.intensity_bound = str2num(intensity_text);");
            proxy.eval("fluocell_data = update_figure(fluocell_data);");
        } catch (MatlabInvocationException ex) {
            Logger.getLogger(fluocellUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_intensityFocusLost

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            proxy.eval("fluocell_data = batch_update_figure(fluocell_data);");
        } catch (MatlabInvocationException ex) {
            Logger.getLogger(fluocellUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        batchUpdateImage.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void fretRatioFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fretRatioFocusLost
        try {
            proxy.setVariable("ratio_text", fretRatio.getText());
            proxy.eval("fluocell_data.ratio_bound = str2num(ratio_text);");
            proxy.eval("fluocell_data = update_figure(fluocell_data);");
        } catch (MatlabInvocationException ex) {
            Logger.getLogger(fluocellUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_fretRatioFocusLost

    private void timeFrameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_timeFrameFocusLost
        try {
            String pattern = timeFrame.getText();
            proxy.setVariable("image_index_pattern", pattern);
            proxy.eval("fluocell_data.index_pattern = eval(image_index_pattern);");
        } catch (MatlabInvocationException ex) {
            Logger.getLogger(fluocellUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_timeFrameFocusLost

    private void firstChannelFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_firstChannelFocusLost
        try {
            proxy.setVariable("first_channel_pattern", firstChannel.getText());
            proxy.eval("fluocell_data.channel_pattern{1} = first_channel_pattern;");
        } catch (MatlabInvocationException ex) {
            Logger.getLogger(fluocellUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_firstChannelFocusLost

    private void secondChannelFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_secondChannelFocusLost
        try {
            proxy.setVariable("second_channel_pattern", secondChannel.getText());
            proxy.eval("fluocell_data.channel_pattern{2} = second_channel_pattern;");
        } catch (MatlabInvocationException ex) {
            Logger.getLogger(fluocellUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_secondChannelFocusLost

    private void thirdChannelFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_thirdChannelFocusLost
        try {
            proxy.setVariable("third_channel_pattern", thirdChannel.getText());
            proxy.eval("fluocell_data.channel_pattern{3} = third_channel_pattern;");
        } catch (MatlabInvocationException ex) {
            Logger.getLogger(fluocellUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_thirdChannelFocusLost

    private void fourthChannelFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fourthChannelFocusLost
        try {
            proxy.setVariable("fourth_channel_pattern", fourthChannel.getText());
            proxy.eval("fluocell_data.channel_pattern{4} = fourth_channel_pattern;");
        } catch (MatlabInvocationException ex) {
            Logger.getLogger(fluocellUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_fourthChannelFocusLost

    private void thresholdFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_thresholdFocusLost
        try {
            proxy.setVariable("threshold", threshold.getText());
            proxy.eval("threshold = str2double(threshold);");
            proxy.eval("fluocell_data.threshold = threshold;");
        } catch (MatlabInvocationException ex) {
            Logger.getLogger(fluocellUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_thresholdFocusLost

    private void imageIndexFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_imageIndexFocusLost
        try {
            proxy.setVariable("image_index", imageIndex.getText());
            proxy.eval("fluocell_data.image_index = str2num(image_index);");
            //proxy.eval("fluocell_data = batch_update_figure(fluocell_data);");
        } catch (MatlabInvocationException ex) {
            Logger.getLogger(fluocellUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_imageIndexFocusLost

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        writeFile();
    }//GEN-LAST:event_formWindowClosing

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        try {
            // Create proxy to control MATLAB and set up default parameters  
            readFile();
            MatlabProxyFactory factory = new MatlabProxyFactory();
            // Launch file selector if OS is not Windows or Mac
            if (!(OS.contains("mac") || OS.contains("win"))) {
                if (matlabLocation.length() < 1) {
                    int returnVal = fileChooser.showOpenDialog(this);
                    if (returnVal == JFileChooser.APPROVE_OPTION) {
                        File matlabFile = fileChooser.getSelectedFile();  
                        matlabLocation = matlabFile.getAbsolutePath();                    
                    } 
                    else {
                        System.exit(0);
                    }
                MatlabProxyFactoryOptions options = new MatlabProxyFactoryOptions
                                                .Builder()
                                                .setMatlabLocation(matlabLocation)
                                                .build();
                factory = new MatlabProxyFactory(options);
                } 
            // If MATLAB path is specified in default.property, launch from 
            // that location
            } else {
                if (matlabLocation.length() > 1) {
                    MatlabProxyFactoryOptions options = new MatlabProxyFactoryOptions
                                                .Builder()
                                                .setMatlabLocation(matlabLocation)
                                                .build();
                    factory = new MatlabProxyFactory(options);
                }
            }
            proxy = factory.getProxy();
            proxy.setVariable("image_index_pattern", imageIndexPattern);
            proxy.eval("fluocell_data.index_pattern = eval(image_index_pattern);");
            proxy.setVariable("protocol", protocolValue);
            proxy.eval("fluocell_data.protocol = protocol;");
            proxy.setVariable("fourth_channel_pattern", fourthChannelPattern);
            proxy.eval("fluocell_data.channel_pattern{4} = fourth_channel_pattern;");
            proxy.setVariable("third_channel_pattern", thirdChannelPattern);
            proxy.eval("fluocell_data.channel_pattern{3} = third_channel_pattern;");
            proxy.setVariable("second_channel_pattern", secondChannelPattern);
            proxy.eval("fluocell_data.channel_pattern{2} = second_channel_pattern;");
            proxy.setVariable("first_channel_pattern", firstChannelPattern);
            proxy.eval("fluocell_data.channel_pattern{1} = first_channel_pattern;");
            if (default_path==null)
                default_path = "./";
            proxy.setVariable("default_path", default_path);
            proxy.eval("fluocell_data.path = default_path;");
        } catch (MatlabInvocationException ex) {
            Logger.getLogger(fluocellUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MatlabConnectionException ex) {
            Logger.getLogger(fluocellUI.class.getName()).log(Level.SEVERE, null, ex);
            Logger.getLogger(fluocellUI.class.getName()).log(Level.SEVERE, null, ex);
            errorDialog.setVisible(true);
        }
        
    }//GEN-LAST:event_formWindowOpened

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void errorDialogWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_errorDialogWindowClosing
        System.exit(0);
    }//GEN-LAST:event_errorDialogWindowClosing

    private void brightnessFactorFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_brightnessFactorFocusLost
        try {
            proxy.setVariable("bf_str", brightnessFactor.getText());
            proxy.eval("fluocell_data.brightness_factor = str2double(bf_str);");
        } catch (MatlabInvocationException ex) {
            Logger.getLogger(fluocellUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_brightnessFactorFocusLost

    private void brightnessFactorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brightnessFactorActionPerformed
        try {
            proxy.setVariable("bf_str", brightnessFactor.getText());
            proxy.eval("fluocell_data.brightness_factor = str2double(bf_str);");
        } catch (MatlabInvocationException ex) {
            Logger.getLogger(fluocellUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_brightnessFactorActionPerformed

    private void comboBoxQuantificationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxQuantificationActionPerformed
        try {
            proxy.setVariable("quantification_str", comboBoxQuantification.getSelectedItem() );
            proxy.eval("fluocell_data.quantify_roi = str2double(quantification_str(1));");
        } catch (MatlabInvocationException ex) {
            Logger.getLogger(fluocellUI.class.getName()).log(Level.SEVERE, null, ex);
        // TODO add your handling code here:
        }
    }//GEN-LAST:event_comboBoxQuantificationActionPerformed

    private void thirdChannelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_thirdChannelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_thirdChannelActionPerformed

    private void comboBoxSubtractBackgroundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxSubtractBackgroundActionPerformed
        // TODO add your handling code here:
        try {
            proxy.setVariable("subtract_background_str", comboBoxSubtractBackground.getSelectedItem() );
            proxy.eval("fluocell_data.subtract_background = str2double(subtract_background_str(1));");
        } catch (MatlabInvocationException ex) {
            Logger.getLogger(fluocellUI.class.getName()).log(Level.SEVERE, null, ex);
        // TODO add your handling code here:
        }
    }//GEN-LAST:event_comboBoxSubtractBackgroundActionPerformed

    private void thresholdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_thresholdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_thresholdActionPerformed

    private void intensityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_intensityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_intensityActionPerformed

    private void threeDimensionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_threeDimensionActionPerformed
        threeDimensionDialog.setVisible(true);
    }//GEN-LAST:event_threeDimensionActionPerformed

    private void zindexSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_zindexSpinnerStateChanged
        if (file_opened) {
            try {
                proxy.setVariable("z_index", zindexSpinner.getValue());
                proxy.eval("fluocell_data.z_index = z_index;");
                proxy.eval("fluocell_data = get_image(fluocell_data,0);");
                proxy.eval("fluocell_data = update_figure(fluocell_data);");
            } catch (MatlabInvocationException ex) {
                Logger.getLogger(fluocellUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_zindexSpinnerStateChanged

    private void zindexEnableCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zindexEnableCheckBoxActionPerformed
        if (zindexEnableCheckBox.isSelected()) {
            try{
                proxy.eval("fluocell_data.image_type = 'z-stack';");
            } catch (MatlabInvocationException ex) {
                Logger.getLogger(fluocellUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else {
           try{
                proxy.eval("fluocell_data = rmfield(fluocell_data,'image_type');");
            } catch (MatlabInvocationException ex) {
                Logger.getLogger(fluocellUI.class.getName()).log(Level.SEVERE, null, ex);
            } 
        }
    }//GEN-LAST:event_zindexEnableCheckBoxActionPerformed

    private void timeZeroTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_timeZeroTextFocusLost
       // In the future we can change pdgf_between_frame to time_zero_between_frame
        try{
            proxy.setVariable("time_zero_text", timeZeroText.getText());
            proxy.eval("fluocell_data.pdgf_between_frame = str2num(time_zero_text);");
            // proxy.eval("fluocell_data = update_figure(fluocell_data);");
        } catch (MatlabInvocationException ex){
            Logger.getLogger(fluocellUI.class.getName()).log(Level.SEVERE, null, ex);
        } // TODO add your handling code here:
    }//GEN-LAST:event_timeZeroTextFocusLost

    private void timeZeroTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeZeroTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_timeZeroTextActionPerformed

    private void numROIFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_numROIFocusLost
        try {
            proxy.setVariable("num_roi_str", numROI.getText());
            proxy.eval("fluocell_data.num_roi = str2num(num_roi_str);");
        } catch (MatlabInvocationException ex) {
            Logger.getLogger(fluocellUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_numROIFocusLost

    private void numROIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numROIActionPerformed
    }//GEN-LAST:event_numROIActionPerformed
 
    private void readFile() throws MatlabInvocationException {
        try {
            // Import parameters from properties file
            Properties default_read = new Properties();
            default_read.load(new FileInputStream("default.property"));
            imageIndexPattern = default_read.getProperty("imageIndexPattern");
            timeFrame.setText(imageIndexPattern);
            firstChannelPattern = default_read.getProperty("firstChannelPattern");
            firstChannel.setText(firstChannelPattern);
            secondChannelPattern = default_read.getProperty("secondChannelPattern");
            secondChannel.setText(secondChannelPattern);
            thirdChannelPattern = default_read.getProperty("thirdChannelPattern");
            thirdChannel.setText(thirdChannelPattern);
            fourthChannelPattern = default_read.getProperty("fourthChannelPattern");
            fourthChannel.setText(fourthChannelPattern);
            intensityValue = default_read.getProperty("intensityValue");
            intensity.setText(intensityValue);
            fretRatioValue = default_read.getProperty("fretRatioValue");
            fretRatio.setText(fretRatioValue);
//            drivenFactorValue = default_read.getProperty("drivenFactorValue");
//            drivenFactor.setText(drivenFactorValue);
            protocolValue = (String) protocol.getSelectedItem();
            //comboBoxQuantificationValue = (String) comboBoxQuantification.getSelectedItem();
            matlabLocation = default_read.getProperty("matlablocation");
            // read default_path = defaultDataLocation
            // set the variable in matlab
            //fluocell_data.path = default_path;
            default_path = (String) default_read.getProperty("defaultDataLocation");

        } catch (IOException ex) {
            Logger.getLogger(fluocellUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    private void writeFile() {
        try {
            // Write parameters to properties file
            Properties default_write = new Properties();
            default_write.setProperty("imageIndexPattern", timeFrame.getText());
            default_write.setProperty("firstChannelPattern", firstChannel.getText());
            default_write.setProperty("secondChannelPattern", secondChannel.getText());
            default_write.setProperty("thirdChannelPattern", thirdChannel.getText());
            default_write.setProperty("fourthChannelPattern", fourthChannel.getText());
            default_write.setProperty("intensityValue", intensity.getText());
            default_write.setProperty("fretRatioValue", fretRatio.getText());
//            default_write.setProperty("drivenFactorValue",drivenFactor.getText());
            default_write.setProperty("defaultDataLocation", default_path);
            default_write.setProperty("matlablocation", matlabLocation);
            default_write.store(new FileOutputStream("default.property"), null);
        } catch (IOException ex) {
            Logger.getLogger(fluocellUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            //for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            //                if ("Nimbus".equals(info.getName())) {
            //        javax.swing.UIManager.setLookAndFeel(info.getClassName());
            //        break;
            //    }
            //}
            //javax.swing.UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");
            javax.swing.UIManager.setLookAndFeel(
                    javax.swing.UIManager.getCrossPlatformLookAndFeelClassName());
            javax.swing.UIManager.put("Label.font", 
                    new javax.swing.plaf.FontUIResource(new Font("Dialog", Font.BOLD, 24)));
            javax.swing.UIManager.put("Menu.font", 
                    new javax.swing.plaf.FontUIResource(new Font("Dialog", Font.BOLD, 24)));
            javax.swing.UIManager.put("Panel.font", 
                    new javax.swing.plaf.FontUIResource(new Font("Dialog", Font.BOLD, 24)));
            javax.swing.UIManager.put("TextField.font", 
                    new javax.swing.plaf.FontUIResource(new Font("Dialog", Font.BOLD, 24)));
            javax.swing.UIManager.put("CheckBox.font", 
                    new javax.swing.plaf.FontUIResource(new Font("Dialog", Font.BOLD, 24)));
            javax.swing.UIManager.put("ComboBox.font", 
                    new javax.swing.plaf.FontUIResource(new Font("Dialog", Font.BOLD, 24)));
            javax.swing.UIManager.put("Spinner.font", 
                    new javax.swing.plaf.FontUIResource(new Font("Dialog", Font.BOLD, 24)));
            javax.swing.UIManager.put("MenuItem.font", 
                    new javax.swing.plaf.FontUIResource(new Font("Dialog", Font.BOLD, 24)));

        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(fluocellUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(fluocellUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(fluocellUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(fluocellUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new fluocellUI().setVisible(true);
            }
        }); 
    }
      
    // MATLAB Variables declaration
    String imageIndexPattern;
    String firstChannelPattern;
    String secondChannelPattern;
    String thirdChannelPattern;
    String fourthChannelPattern;
    String intensityValue;
    String fretRatioValue;
    String drivenFactorValue;
    String matlabLocation;
    String protocolValue;
    // Determine operating system
    String OS = System.getProperty("os.name").toLowerCase();
    
    // MATLAB setup
    public static MatlabProxy proxy;
    public boolean file_opened = false;
    public String default_path = "";
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ThesholdLabel;
    private javax.swing.JMenuItem adjustBrightnessFactor;
    private javax.swing.JCheckBox applyFilter;
    private javax.swing.JCheckBox applyMask;
    private javax.swing.JMenuItem batchUpdate;
    private javax.swing.JFrame batchUpdateImage;
    private javax.swing.JTextField brightnessFactor;
    private javax.swing.JLabel brightnessFactorLabel;
    private javax.swing.JFrame chooseThreshold;
    private javax.swing.JMenuItem closeFigure;
    private javax.swing.JComboBox comboBoxQuantification;
    private javax.swing.JComboBox comboBoxSubtractBackground;
    private javax.swing.JCheckBox cropImage;
    private javax.swing.JDialog errorDialog;
    private javax.swing.JFileChooser figureChooser;
    private javax.swing.JMenu file;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JPanel fileNamePattern;
    private javax.swing.JTextField firstChannel;
    private javax.swing.JFileChooser folderChooser;
    private javax.swing.JTextField fourthChannel;
    private javax.swing.JTextField fretRatio;
    private javax.swing.JTextField imageIndex;
    private javax.swing.JSpinner indexSpinner;
    private javax.swing.JTextField intensity;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelQuantification;
    private javax.swing.JLabel jLabelSubtractBackground;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel mainControl;
    private javax.swing.JTextField numROI;
    private javax.swing.JLabel numROILabel;
    private javax.swing.JMenuItem openFigure;
    private javax.swing.JMenuItem openFolder;
    private javax.swing.JPanel processingOptions;
    private javax.swing.JComboBox protocol;
    private javax.swing.JMenuItem quit;
    private javax.swing.JCheckBox saveImage;
    private javax.swing.JTextField secondChannel;
    private javax.swing.JCheckBox showBoundary;
    private javax.swing.JTextField thirdChannel;
    private javax.swing.JMenuItem threeDimension;
    private javax.swing.JFrame threeDimensionDialog;
    private javax.swing.JTextField threshold;
    private javax.swing.JTextField timeFrame;
    private javax.swing.JLabel timeZero;
    private javax.swing.JTextField timeZeroText;
    private javax.swing.JMenu tools;
    private javax.swing.JCheckBox zindexEnableCheckBox;
    private javax.swing.JSpinner zindexSpinner;
    // End of variables declaration//GEN-END:variables
    
    
    private void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/pic/fluocell_icon.png"))); //genaration of fluocll icon
    }
}
